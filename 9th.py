"""
Automatically generated by Colab.


"""

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.model_selection import train_test_split

import numpy as np
import pandas as pd

sales = pd.read_csv('/content/stores_sales_forecasting.csv',
                   encoding = 'latin1')
sales.head()

sales.shape

sales.info()

sales.describe()

dict = {}
for i in list(sales.columns):
    dict[i] = sales[i].value_counts().shape[0]

pd.DataFrame(dict, index = ['unique count']).transpose()

sales = sales.drop(columns = ['Row ID'])
sales.head()

duplicate_rows = sales[sales.duplicated()]
duplicate_rows

sales = sales.drop_duplicates()
sales.shape

sales['Order Date'] = pd.to_datetime(sales['Order Date'])
sales.set_index('Order Date', inplace = True)

monthly_sales = sales['Sales'].resample('M').sum()
monthly_sales

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.histplot(sales['Sales'], bins=30, kde=True)
plt.title('Sales Distribution')

plt.subplot(1, 3, 2)
sns.histplot(sales['Quantity'], bins=30, kde=True)
plt.title('Quantity Distribution')

plt.subplot(1, 3, 3)
sns.histplot(sales['Profit'], bins=30, kde=True)
plt.title('Profit Distribution')

plt.tight_layout()
plt.show()

plt.figure(figsize = (10,6))
plt.plot(monthly_sales.index, monthly_sales.values, marker = 'o', linestyle = '-')
plt.title('Monthly Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

scatter_plot = px.scatter(sales, x = 'Sales', y = 'Profit', color = 'Sales',
                          size = 'Discount', title = 'Sales vs Profit')
scatter_plot.update_layout(width = 800,
                           height = 600)
scatter_plot.show()

plt.figure(figsize = (6,4))
plt.hist(sales['Sales'], bins = 20, color = 'skyblue', edgecolor = 'black')
plt.title('Sales distribution')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

decomposition = seasonal_decompose(monthly_sales, model = 'additive')
plt.figure(figsize = (7,5))

plt.subplot(4,1,1)
plt.plot(decomposition.trend, label = 'Trend', color = 'blue')
plt.title('Trend')

plt.subplot(4,1,2)
plt.plot(decomposition.seasonal, label = 'Seasonality', color = 'green')
plt.title('Seasonality')

plt.subplot(4,1,3)
plt.plot(decomposition.resid, label = 'Residuals', color = 'red')
plt.title('Residuals')

plt.subplot(4,1,4)
plt.plot(monthly_sales.index, monthly_sales.values, marker = 'o', linestyle = '-',
         label = 'Original', color = 'black')
plt.title('Original')
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))

plt.subplot(2, 2, 1)
Y_sales = sales['Sales'].resample('Y').mean()
Y_sales.plot()
plt.title('Mean Sales per Year')

plt.subplot(2, 2, 2)
y_profit = sales['Profit'].resample('Y').mean()
y_profit.plot()
plt.title('Mean Profit per Year')

plt.subplot(2, 2, 3)
y_quantity = sales['Quantity'].resample('Y').mean()
y_quantity.plot()
plt.title('Mean Quantity per Year')

plt.subplot(2, 2, 4)
y_discount = sales['Discount'].resample('Y').mean()
y_discount.plot()
plt.title('Mean Discount per Year')

plt.tight_layout()
plt.show()

decompose_result = seasonal_decompose(monthly_sales, model = 'multiplicative', period = 12)

adfuller_result = adfuller(monthly_sales)
print('ADF statistic: %f' % adfuller_result[0])
print('p-value: %f' % adfuller_result[1])

from pandas.plotting import autocorrelation_plot
autocorrelation_plot(sales['Sales'])
plt.show()

import statsmodels.api as sm

fig, ax1 = plt.subplots(figsize = (12,6))
sm.graphics.tsa.plot_acf(sales['Sales'], lags = 40, ax = ax1)
plt.title('Autocorrelation Function ACF')

fig, ax2 = plt.subplots(figsize = (12,6))
sm.graphics.tsa.plot_pacf(sales['Sales'], lags = 40, ax = ax2)
plt.title('Partial autocorrelation function PACF')

plt.show()

X = np.arange(len(monthly_sales)).reshape(-1,1)
Y = monthly_sales.values
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, shuffle = False)

from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX

arima_model = ARIMA(Y_train, order = (5,1,0))
arima_model_fit = arima_model.fit()

sarima_model = SARIMAX(Y_train, order = (1,1,1), seasonal_order = (1,1,1,12))
sarima_model_fit = sarima_model.fit()

arima_model_fit.summary()

sarima_model_fit.summary()

"""#Forecasting"""

arima_predictions = arima_model_fit.forecast(steps = len(X_test))
sarima_predictions = sarima_model_fit.forecast(steps = len(X_test))

plt.figure(figsize = (10,6))
plt.plot(X_train, Y_train, label = 'Train')
plt.plot(X_test, Y_test, label = 'Test')
plt.plot(X_test, arima_predictions, label = 'ARIMA predictions')
plt.plot(X_test, sarima_predictions, label = 'SARIMA predictions')
plt.title('Sales forecasting with ARIMA and SARIMA')
plt.xlabel('Months')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()

